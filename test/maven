#!/usr/bin/env bash

#------------------------------------------------------------------------------
# @file
# Performs assertion testing of the functions in this library.
#
# This simple testing mechanism has no provision for the construction and
# deconstruction of unit test scaffolding.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# @function
# Declares assertions.
#
# @return global array $assertions
#   This is a one dimensional array. Each element is a pipe delimited list
#   of three values in this sequence:
#
#   1. Function to test (example: bfl::join)
#   2. Parameters to pass to function (example, "1" "2" "3")
#   3. Expected return code (example: 0)
#------------------------------------------------------------------------------
declare_assertions() {
  declare -ga assertions=(
#   bfl::get_maven_artifact_path
#   If the artifact exists in the default repository, the function should exit with 0 and return the path of the artifact
    'bfl::get_maven_artifact_path|"org.apache.maven" "maven-artifact" "3.1.1" "jar"|"$HOME/.m2/repository/org/apache/maven/maven-artifact/3.1.1/maven-artifact-3.1.1.jar"'
#   If the artifact does not exist in the default repository, the function should exit with 1 but still return the path the artifact would have
    'bfl::get_maven_artifact_path|"biz.netcentric.michaelstrache" "non-existing-package" "1.0.0" "jar"|"$HOME/.m2/repository/biz/netcentric/michaelstrache/non-existing-package/1.0.0/non-existing-package-1.0.0.jar"'
#   If the artifact exists in a userspecific repository, the function should exit with 0 and return the path of the artifact  # (dirname $BASH_FUNCTION_LIBRARY)
    'bfl::get_maven_artifact_path|"biz.netcentric.michaelstrache" "existing-package" "1.0.0" "jar" "${BASH_FUNCTION_LIBRARY%/*}/test/testdata/maven"|"${BASH_FUNCTION_LIBRARY%/*}/test/testdata/maven/existing-package/1.0.0/existing-package-1.0.0.jar"'
#   bfl::get_maven_project_dependency_version
#   If the dependency exists in the POM, the function should exit with 0 and return the version  # (dirname $BASH_FUNCTION_LIBRARY)
    'bfl::get_maven_project_dependency_version|"${BASH_FUNCTION_LIBRARY%/*}/testdata/maven/pom.xml" "biz.netcentric.michaelstrache" "existing-package"|"1.0.0"'
#   If the dependency does not exist in the POM, the function should exit with 1 and return an empty string  # (dirname $BASH_FUNCTION_LIBRARY)
    'bfl::get_maven_project_dependency_version|"${BASH_FUNCTION_LIBRARY%/*}/testdata/maven/pom.xml" "biz.netcentric.michaelstrache" "non-existing-package"|""'
#   bfl::update_maven_project_dependency_version
#   If the dependency exists in the POM, the function should change it and exit with 0  # (dirname $BASH_FUNCTION_LIBRARY)
    'bfl::update_maven_project_dependency_version|"${BASH_FUNCTION_LIBRARY%/*}/testdata/maven/pom.xml" "biz.netcentric.michaelstrache" "existing-package" "2.0.0"|0'
#   If the dependency exists in the POM, the function should change it and exit with 0  # (dirname $BASH_FUNCTION_LIBRARY)
    'bfl::update_maven_project_dependency_version|"${BASH_FUNCTION_LIBRARY%/*}/testdata/maven/pom.xml" "biz.netcentric.michaelstrache" "non-existing-package" "2.0.0"|0'
    )
  }
